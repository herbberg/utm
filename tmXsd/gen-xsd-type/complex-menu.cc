// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "complex-menu.hxx"

namespace tmxsdtree
{
  // menu
  // 

  const menu::ancestor_id_type& menu::
  ancestor_id () const
  {
    return this->ancestor_id_.get ();
  }

  menu::ancestor_id_type& menu::
  ancestor_id ()
  {
    return this->ancestor_id_.get ();
  }

  void menu::
  ancestor_id (const ancestor_id_type& x)
  {
    this->ancestor_id_.set (x);
  }

  void menu::
  ancestor_id (::std::auto_ptr< ancestor_id_type > x)
  {
    this->ancestor_id_.set (x);
  }

  const menu::name_type& menu::
  name () const
  {
    return this->name_.get ();
  }

  menu::name_type& menu::
  name ()
  {
    return this->name_.get ();
  }

  void menu::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void menu::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const menu::uuid_menu_type& menu::
  uuid_menu () const
  {
    return this->uuid_menu_.get ();
  }

  menu::uuid_menu_type& menu::
  uuid_menu ()
  {
    return this->uuid_menu_.get ();
  }

  void menu::
  uuid_menu (const uuid_menu_type& x)
  {
    this->uuid_menu_.set (x);
  }

  void menu::
  uuid_menu (::std::auto_ptr< uuid_menu_type > x)
  {
    this->uuid_menu_.set (x);
  }

  const menu::uuid_firmware_type& menu::
  uuid_firmware () const
  {
    return this->uuid_firmware_.get ();
  }

  menu::uuid_firmware_type& menu::
  uuid_firmware ()
  {
    return this->uuid_firmware_.get ();
  }

  void menu::
  uuid_firmware (const uuid_firmware_type& x)
  {
    this->uuid_firmware_.set (x);
  }

  void menu::
  uuid_firmware (::std::auto_ptr< uuid_firmware_type > x)
  {
    this->uuid_firmware_.set (x);
  }

  const menu::global_tag_type& menu::
  global_tag () const
  {
    return this->global_tag_.get ();
  }

  menu::global_tag_type& menu::
  global_tag ()
  {
    return this->global_tag_.get ();
  }

  void menu::
  global_tag (const global_tag_type& x)
  {
    this->global_tag_.set (x);
  }

  void menu::
  global_tag (::std::auto_ptr< global_tag_type > x)
  {
    this->global_tag_.set (x);
  }

  const menu::grammar_version_type& menu::
  grammar_version () const
  {
    return this->grammar_version_.get ();
  }

  menu::grammar_version_type& menu::
  grammar_version ()
  {
    return this->grammar_version_.get ();
  }

  void menu::
  grammar_version (const grammar_version_type& x)
  {
    this->grammar_version_.set (x);
  }

  void menu::
  grammar_version (::std::auto_ptr< grammar_version_type > x)
  {
    this->grammar_version_.set (x);
  }

  const menu::n_modules_type& menu::
  n_modules () const
  {
    return this->n_modules_.get ();
  }

  menu::n_modules_type& menu::
  n_modules ()
  {
    return this->n_modules_.get ();
  }

  void menu::
  n_modules (const n_modules_type& x)
  {
    this->n_modules_.set (x);
  }

  const menu::is_valid_optional& menu::
  is_valid () const
  {
    return this->is_valid_;
  }

  menu::is_valid_optional& menu::
  is_valid ()
  {
    return this->is_valid_;
  }

  void menu::
  is_valid (const is_valid_type& x)
  {
    this->is_valid_.set (x);
  }

  void menu::
  is_valid (const is_valid_optional& x)
  {
    this->is_valid_ = x;
  }

  const menu::is_obsolete_optional& menu::
  is_obsolete () const
  {
    return this->is_obsolete_;
  }

  menu::is_obsolete_optional& menu::
  is_obsolete ()
  {
    return this->is_obsolete_;
  }

  void menu::
  is_obsolete (const is_obsolete_type& x)
  {
    this->is_obsolete_.set (x);
  }

  void menu::
  is_obsolete (const is_obsolete_optional& x)
  {
    this->is_obsolete_ = x;
  }

  const menu::comment_optional& menu::
  comment () const
  {
    return this->comment_;
  }

  menu::comment_optional& menu::
  comment ()
  {
    return this->comment_;
  }

  void menu::
  comment (const comment_type& x)
  {
    this->comment_.set (x);
  }

  void menu::
  comment (const comment_optional& x)
  {
    this->comment_ = x;
  }

  void menu::
  comment (::std::auto_ptr< comment_type > x)
  {
    this->comment_.set (x);
  }

  const menu::algorithm_sequence& menu::
  algorithm () const
  {
    return this->algorithm_;
  }

  menu::algorithm_sequence& menu::
  algorithm ()
  {
    return this->algorithm_;
  }

  void menu::
  algorithm (const algorithm_sequence& s)
  {
    this->algorithm_ = s;
  }

  const menu::scale_set_optional& menu::
  scale_set () const
  {
    return this->scale_set_;
  }

  menu::scale_set_optional& menu::
  scale_set ()
  {
    return this->scale_set_;
  }

  void menu::
  scale_set (const scale_set_type& x)
  {
    this->scale_set_.set (x);
  }

  void menu::
  scale_set (const scale_set_optional& x)
  {
    this->scale_set_ = x;
  }

  void menu::
  scale_set (::std::auto_ptr< scale_set_type > x)
  {
    this->scale_set_.set (x);
  }

  const menu::ext_signal_set_optional& menu::
  ext_signal_set () const
  {
    return this->ext_signal_set_;
  }

  menu::ext_signal_set_optional& menu::
  ext_signal_set ()
  {
    return this->ext_signal_set_;
  }

  void menu::
  ext_signal_set (const ext_signal_set_type& x)
  {
    this->ext_signal_set_.set (x);
  }

  void menu::
  ext_signal_set (const ext_signal_set_optional& x)
  {
    this->ext_signal_set_ = x;
  }

  void menu::
  ext_signal_set (::std::auto_ptr< ext_signal_set_type > x)
  {
    this->ext_signal_set_.set (x);
  }

  const menu::menu_id_optional& menu::
  menu_id () const
  {
    return this->menu_id_;
  }

  menu::menu_id_optional& menu::
  menu_id ()
  {
    return this->menu_id_;
  }

  void menu::
  menu_id (const menu_id_type& x)
  {
    this->menu_id_.set (x);
  }

  void menu::
  menu_id (const menu_id_optional& x)
  {
    this->menu_id_ = x;
  }

  void menu::
  menu_id (::std::auto_ptr< menu_id_type > x)
  {
    this->menu_id_.set (x);
  }

  const menu::datetime_optional& menu::
  datetime () const
  {
    return this->datetime_;
  }

  menu::datetime_optional& menu::
  datetime ()
  {
    return this->datetime_;
  }

  void menu::
  datetime (const datetime_type& x)
  {
    this->datetime_.set (x);
  }

  void menu::
  datetime (const datetime_optional& x)
  {
    this->datetime_ = x;
  }

  void menu::
  datetime (::std::auto_ptr< datetime_type > x)
  {
    this->datetime_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace tmxsdtree
{
  // menu
  //

  menu::
  menu (const ancestor_id_type& ancestor_id,
        const name_type& name,
        const uuid_menu_type& uuid_menu,
        const uuid_firmware_type& uuid_firmware,
        const global_tag_type& global_tag,
        const grammar_version_type& grammar_version,
        const n_modules_type& n_modules)
  : ::xml_schema::type (),
    ancestor_id_ (ancestor_id, this),
    name_ (name, this),
    uuid_menu_ (uuid_menu, this),
    uuid_firmware_ (uuid_firmware, this),
    global_tag_ (global_tag, this),
    grammar_version_ (grammar_version, this),
    n_modules_ (n_modules, this),
    is_valid_ (this),
    is_obsolete_ (this),
    comment_ (this),
    algorithm_ (this),
    scale_set_ (this),
    ext_signal_set_ (this),
    menu_id_ (this),
    datetime_ (this)
  {
  }

  menu::
  menu (const menu& x,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    ancestor_id_ (x.ancestor_id_, f, this),
    name_ (x.name_, f, this),
    uuid_menu_ (x.uuid_menu_, f, this),
    uuid_firmware_ (x.uuid_firmware_, f, this),
    global_tag_ (x.global_tag_, f, this),
    grammar_version_ (x.grammar_version_, f, this),
    n_modules_ (x.n_modules_, f, this),
    is_valid_ (x.is_valid_, f, this),
    is_obsolete_ (x.is_obsolete_, f, this),
    comment_ (x.comment_, f, this),
    algorithm_ (x.algorithm_, f, this),
    scale_set_ (x.scale_set_, f, this),
    ext_signal_set_ (x.ext_signal_set_, f, this),
    menu_id_ (x.menu_id_, f, this),
    datetime_ (x.datetime_, f, this)
  {
  }

  menu::
  menu (const ::xercesc::DOMElement& e,
        ::xml_schema::flags f,
        ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    ancestor_id_ (this),
    name_ (this),
    uuid_menu_ (this),
    uuid_firmware_ (this),
    global_tag_ (this),
    grammar_version_ (this),
    n_modules_ (this),
    is_valid_ (this),
    is_obsolete_ (this),
    comment_ (this),
    algorithm_ (this),
    scale_set_ (this),
    ext_signal_set_ (this),
    menu_id_ (this),
    datetime_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void menu::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // ancestor_id
      //
      if (n.name () == "ancestor_id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ancestor_id_type > r (
          ancestor_id_traits::create (i, f, this));

        if (!ancestor_id_.present ())
        {
          this->ancestor_id_.set (r);
          continue;
        }
      }

      // name
      //
      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (r);
          continue;
        }
      }

      // uuid_menu
      //
      if (n.name () == "uuid_menu" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< uuid_menu_type > r (
          uuid_menu_traits::create (i, f, this));

        if (!uuid_menu_.present ())
        {
          this->uuid_menu_.set (r);
          continue;
        }
      }

      // uuid_firmware
      //
      if (n.name () == "uuid_firmware" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< uuid_firmware_type > r (
          uuid_firmware_traits::create (i, f, this));

        if (!uuid_firmware_.present ())
        {
          this->uuid_firmware_.set (r);
          continue;
        }
      }

      // global_tag
      //
      if (n.name () == "global_tag" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< global_tag_type > r (
          global_tag_traits::create (i, f, this));

        if (!global_tag_.present ())
        {
          this->global_tag_.set (r);
          continue;
        }
      }

      // grammar_version
      //
      if (n.name () == "grammar_version" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< grammar_version_type > r (
          grammar_version_traits::create (i, f, this));

        if (!grammar_version_.present ())
        {
          this->grammar_version_.set (r);
          continue;
        }
      }

      // n_modules
      //
      if (n.name () == "n_modules" && n.namespace_ ().empty ())
      {
        if (!n_modules_.present ())
        {
          this->n_modules_.set (n_modules_traits::create (i, f, this));
          continue;
        }
      }

      // is_valid
      //
      if (n.name () == "is_valid" && n.namespace_ ().empty ())
      {
        if (!this->is_valid_)
        {
          this->is_valid_.set (is_valid_traits::create (i, f, this));
          continue;
        }
      }

      // is_obsolete
      //
      if (n.name () == "is_obsolete" && n.namespace_ ().empty ())
      {
        if (!this->is_obsolete_)
        {
          this->is_obsolete_.set (is_obsolete_traits::create (i, f, this));
          continue;
        }
      }

      // comment
      //
      if (n.name () == "comment" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< comment_type > r (
          comment_traits::create (i, f, this));

        if (!this->comment_)
        {
          this->comment_.set (r);
          continue;
        }
      }

      // algorithm
      //
      if (n.name () == "algorithm" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< algorithm_type > r (
          algorithm_traits::create (i, f, this));

        this->algorithm_.push_back (r);
        continue;
      }

      // scale_set
      //
      if (n.name () == "scale_set" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< scale_set_type > r (
          scale_set_traits::create (i, f, this));

        if (!this->scale_set_)
        {
          this->scale_set_.set (r);
          continue;
        }
      }

      // ext_signal_set
      //
      if (n.name () == "ext_signal_set" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< ext_signal_set_type > r (
          ext_signal_set_traits::create (i, f, this));

        if (!this->ext_signal_set_)
        {
          this->ext_signal_set_.set (r);
          continue;
        }
      }

      break;
    }

    if (!ancestor_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ancestor_id",
        "");
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "");
    }

    if (!uuid_menu_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "uuid_menu",
        "");
    }

    if (!uuid_firmware_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "uuid_firmware",
        "");
    }

    if (!global_tag_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "global_tag",
        "");
    }

    if (!grammar_version_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "grammar_version",
        "");
    }

    if (!n_modules_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "n_modules",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "menu_id" && n.namespace_ ().empty ())
      {
        this->menu_id_.set (menu_id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "datetime" && n.namespace_ ().empty ())
      {
        this->datetime_.set (datetime_traits::create (i, f, this));
        continue;
      }
    }
  }

  menu* menu::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class menu (*this, f, c);
  }

  menu& menu::
  operator= (const menu& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->ancestor_id_ = x.ancestor_id_;
      this->name_ = x.name_;
      this->uuid_menu_ = x.uuid_menu_;
      this->uuid_firmware_ = x.uuid_firmware_;
      this->global_tag_ = x.global_tag_;
      this->grammar_version_ = x.grammar_version_;
      this->n_modules_ = x.n_modules_;
      this->is_valid_ = x.is_valid_;
      this->is_obsolete_ = x.is_obsolete_;
      this->comment_ = x.comment_;
      this->algorithm_ = x.algorithm_;
      this->scale_set_ = x.scale_set_;
      this->ext_signal_set_ = x.ext_signal_set_;
      this->menu_id_ = x.menu_id_;
      this->datetime_ = x.datetime_;
    }

    return *this;
  }

  menu::
  ~menu ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace tmxsdtree
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace tmxsdtree
{
  void
  operator<< (::xercesc::DOMElement& e, const menu& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // ancestor_id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ancestor_id",
          e));

      s << i.ancestor_id ();
    }

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          e));

      s << i.name ();
    }

    // uuid_menu
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "uuid_menu",
          e));

      s << i.uuid_menu ();
    }

    // uuid_firmware
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "uuid_firmware",
          e));

      s << i.uuid_firmware ();
    }

    // global_tag
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "global_tag",
          e));

      s << i.global_tag ();
    }

    // grammar_version
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "grammar_version",
          e));

      s << i.grammar_version ();
    }

    // n_modules
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "n_modules",
          e));

      s << i.n_modules ();
    }

    // is_valid
    //
    if (i.is_valid ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "is_valid",
          e));

      s << *i.is_valid ();
    }

    // is_obsolete
    //
    if (i.is_obsolete ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "is_obsolete",
          e));

      s << *i.is_obsolete ();
    }

    // comment
    //
    if (i.comment ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "comment",
          e));

      s << *i.comment ();
    }

    // algorithm
    //
    for (menu::algorithm_const_iterator
         b (i.algorithm ().begin ()), n (i.algorithm ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "algorithm",
          e));

      s << *b;
    }

    // scale_set
    //
    if (i.scale_set ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "scale_set",
          e));

      s << *i.scale_set ();
    }

    // ext_signal_set
    //
    if (i.ext_signal_set ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ext_signal_set",
          e));

      s << *i.ext_signal_set ();
    }

    // menu_id
    //
    if (i.menu_id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "menu_id",
          e));

      a << *i.menu_id ();
    }

    // datetime
    //
    if (i.datetime ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "datetime",
          e));

      a << *i.datetime ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

