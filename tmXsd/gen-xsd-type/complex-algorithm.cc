// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "complex-algorithm.hxx"

namespace tmxsdtree
{
  // algorithm
  // 

  const algorithm::name_type& algorithm::
  name () const
  {
    return this->name_.get ();
  }

  algorithm::name_type& algorithm::
  name ()
  {
    return this->name_.get ();
  }

  void algorithm::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void algorithm::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const algorithm::expression_type& algorithm::
  expression () const
  {
    return this->expression_.get ();
  }

  algorithm::expression_type& algorithm::
  expression ()
  {
    return this->expression_.get ();
  }

  void algorithm::
  expression (const expression_type& x)
  {
    this->expression_.set (x);
  }

  void algorithm::
  expression (::std::auto_ptr< expression_type > x)
  {
    this->expression_.set (x);
  }

  const algorithm::index_type& algorithm::
  index () const
  {
    return this->index_.get ();
  }

  algorithm::index_type& algorithm::
  index ()
  {
    return this->index_.get ();
  }

  void algorithm::
  index (const index_type& x)
  {
    this->index_.set (x);
  }

  const algorithm::module_id_type& algorithm::
  module_id () const
  {
    return this->module_id_.get ();
  }

  algorithm::module_id_type& algorithm::
  module_id ()
  {
    return this->module_id_.get ();
  }

  void algorithm::
  module_id (const module_id_type& x)
  {
    this->module_id_.set (x);
  }

  const algorithm::module_index_type& algorithm::
  module_index () const
  {
    return this->module_index_.get ();
  }

  algorithm::module_index_type& algorithm::
  module_index ()
  {
    return this->module_index_.get ();
  }

  void algorithm::
  module_index (const module_index_type& x)
  {
    this->module_index_.set (x);
  }

  const algorithm::comment_optional& algorithm::
  comment () const
  {
    return this->comment_;
  }

  algorithm::comment_optional& algorithm::
  comment ()
  {
    return this->comment_;
  }

  void algorithm::
  comment (const comment_type& x)
  {
    this->comment_.set (x);
  }

  void algorithm::
  comment (const comment_optional& x)
  {
    this->comment_ = x;
  }

  void algorithm::
  comment (::std::auto_ptr< comment_type > x)
  {
    this->comment_.set (x);
  }

  const algorithm::cut_sequence& algorithm::
  cut () const
  {
    return this->cut_;
  }

  algorithm::cut_sequence& algorithm::
  cut ()
  {
    return this->cut_;
  }

  void algorithm::
  cut (const cut_sequence& s)
  {
    this->cut_ = s;
  }

  const algorithm::object_requirement_sequence& algorithm::
  object_requirement () const
  {
    return this->object_requirement_;
  }

  algorithm::object_requirement_sequence& algorithm::
  object_requirement ()
  {
    return this->object_requirement_;
  }

  void algorithm::
  object_requirement (const object_requirement_sequence& s)
  {
    this->object_requirement_ = s;
  }

  const algorithm::external_requirement_sequence& algorithm::
  external_requirement () const
  {
    return this->external_requirement_;
  }

  algorithm::external_requirement_sequence& algorithm::
  external_requirement ()
  {
    return this->external_requirement_;
  }

  void algorithm::
  external_requirement (const external_requirement_sequence& s)
  {
    this->external_requirement_ = s;
  }

  const algorithm::algorithm_id_optional& algorithm::
  algorithm_id () const
  {
    return this->algorithm_id_;
  }

  algorithm::algorithm_id_optional& algorithm::
  algorithm_id ()
  {
    return this->algorithm_id_;
  }

  void algorithm::
  algorithm_id (const algorithm_id_type& x)
  {
    this->algorithm_id_.set (x);
  }

  void algorithm::
  algorithm_id (const algorithm_id_optional& x)
  {
    this->algorithm_id_ = x;
  }

  void algorithm::
  algorithm_id (::std::auto_ptr< algorithm_id_type > x)
  {
    this->algorithm_id_.set (x);
  }

  const algorithm::datetime_optional& algorithm::
  datetime () const
  {
    return this->datetime_;
  }

  algorithm::datetime_optional& algorithm::
  datetime ()
  {
    return this->datetime_;
  }

  void algorithm::
  datetime (const datetime_type& x)
  {
    this->datetime_.set (x);
  }

  void algorithm::
  datetime (const datetime_optional& x)
  {
    this->datetime_ = x;
  }

  void algorithm::
  datetime (::std::auto_ptr< datetime_type > x)
  {
    this->datetime_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace tmxsdtree
{
  // algorithm
  //

  algorithm::
  algorithm (const name_type& name,
             const expression_type& expression,
             const index_type& index,
             const module_id_type& module_id,
             const module_index_type& module_index)
  : ::xml_schema::type (),
    name_ (name, this),
    expression_ (expression, this),
    index_ (index, this),
    module_id_ (module_id, this),
    module_index_ (module_index, this),
    comment_ (this),
    cut_ (this),
    object_requirement_ (this),
    external_requirement_ (this),
    algorithm_id_ (this),
    datetime_ (this)
  {
  }

  algorithm::
  algorithm (const algorithm& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    expression_ (x.expression_, f, this),
    index_ (x.index_, f, this),
    module_id_ (x.module_id_, f, this),
    module_index_ (x.module_index_, f, this),
    comment_ (x.comment_, f, this),
    cut_ (x.cut_, f, this),
    object_requirement_ (x.object_requirement_, f, this),
    external_requirement_ (x.external_requirement_, f, this),
    algorithm_id_ (x.algorithm_id_, f, this),
    datetime_ (x.datetime_, f, this)
  {
  }

  algorithm::
  algorithm (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (this),
    expression_ (this),
    index_ (this),
    module_id_ (this),
    module_index_ (this),
    comment_ (this),
    cut_ (this),
    object_requirement_ (this),
    external_requirement_ (this),
    algorithm_id_ (this),
    datetime_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void algorithm::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (r);
          continue;
        }
      }

      // expression
      //
      if (n.name () == "expression" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< expression_type > r (
          expression_traits::create (i, f, this));

        if (!expression_.present ())
        {
          this->expression_.set (r);
          continue;
        }
      }

      // index
      //
      if (n.name () == "index" && n.namespace_ ().empty ())
      {
        if (!index_.present ())
        {
          this->index_.set (index_traits::create (i, f, this));
          continue;
        }
      }

      // module_id
      //
      if (n.name () == "module_id" && n.namespace_ ().empty ())
      {
        if (!module_id_.present ())
        {
          this->module_id_.set (module_id_traits::create (i, f, this));
          continue;
        }
      }

      // module_index
      //
      if (n.name () == "module_index" && n.namespace_ ().empty ())
      {
        if (!module_index_.present ())
        {
          this->module_index_.set (module_index_traits::create (i, f, this));
          continue;
        }
      }

      // comment
      //
      if (n.name () == "comment" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< comment_type > r (
          comment_traits::create (i, f, this));

        if (!this->comment_)
        {
          this->comment_.set (r);
          continue;
        }
      }

      // cut
      //
      if (n.name () == "cut" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< cut_type > r (
          cut_traits::create (i, f, this));

        this->cut_.push_back (r);
        continue;
      }

      // object_requirement
      //
      if (n.name () == "object_requirement" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< object_requirement_type > r (
          object_requirement_traits::create (i, f, this));

        this->object_requirement_.push_back (r);
        continue;
      }

      // external_requirement
      //
      if (n.name () == "external_requirement" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< external_requirement_type > r (
          external_requirement_traits::create (i, f, this));

        this->external_requirement_.push_back (r);
        continue;
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "");
    }

    if (!expression_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "expression",
        "");
    }

    if (!index_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "index",
        "");
    }

    if (!module_id_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "module_id",
        "");
    }

    if (!module_index_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "module_index",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "algorithm_id" && n.namespace_ ().empty ())
      {
        this->algorithm_id_.set (algorithm_id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "datetime" && n.namespace_ ().empty ())
      {
        this->datetime_.set (datetime_traits::create (i, f, this));
        continue;
      }
    }
  }

  algorithm* algorithm::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class algorithm (*this, f, c);
  }

  algorithm& algorithm::
  operator= (const algorithm& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->name_ = x.name_;
      this->expression_ = x.expression_;
      this->index_ = x.index_;
      this->module_id_ = x.module_id_;
      this->module_index_ = x.module_index_;
      this->comment_ = x.comment_;
      this->cut_ = x.cut_;
      this->object_requirement_ = x.object_requirement_;
      this->external_requirement_ = x.external_requirement_;
      this->algorithm_id_ = x.algorithm_id_;
      this->datetime_ = x.datetime_;
    }

    return *this;
  }

  algorithm::
  ~algorithm ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace tmxsdtree
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace tmxsdtree
{
  void
  operator<< (::xercesc::DOMElement& e, const algorithm& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          e));

      s << i.name ();
    }

    // expression
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "expression",
          e));

      s << i.expression ();
    }

    // index
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "index",
          e));

      s << i.index ();
    }

    // module_id
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "module_id",
          e));

      s << i.module_id ();
    }

    // module_index
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "module_index",
          e));

      s << i.module_index ();
    }

    // comment
    //
    if (i.comment ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "comment",
          e));

      s << *i.comment ();
    }

    // cut
    //
    for (algorithm::cut_const_iterator
         b (i.cut ().begin ()), n (i.cut ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "cut",
          e));

      s << *b;
    }

    // object_requirement
    //
    for (algorithm::object_requirement_const_iterator
         b (i.object_requirement ().begin ()), n (i.object_requirement ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "object_requirement",
          e));

      s << *b;
    }

    // external_requirement
    //
    for (algorithm::external_requirement_const_iterator
         b (i.external_requirement ().begin ()), n (i.external_requirement ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "external_requirement",
          e));

      s << *b;
    }

    // algorithm_id
    //
    if (i.algorithm_id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "algorithm_id",
          e));

      a << *i.algorithm_id ();
    }

    // datetime
    //
    if (i.datetime ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "datetime",
          e));

      a << *i.datetime ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

