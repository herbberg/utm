// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "complex-bin.hxx"

namespace tmxsdtree
{
  // bin
  // 

  const bin::number_type& bin::
  number () const
  {
    return this->number_.get ();
  }

  bin::number_type& bin::
  number ()
  {
    return this->number_.get ();
  }

  void bin::
  number (const number_type& x)
  {
    this->number_.set (x);
  }

  const bin::minimum_type& bin::
  minimum () const
  {
    return this->minimum_.get ();
  }

  bin::minimum_type& bin::
  minimum ()
  {
    return this->minimum_.get ();
  }

  void bin::
  minimum (const minimum_type& x)
  {
    this->minimum_.set (x);
  }

  void bin::
  minimum (::std::auto_ptr< minimum_type > x)
  {
    this->minimum_.set (x);
  }

  const bin::maximum_type& bin::
  maximum () const
  {
    return this->maximum_.get ();
  }

  bin::maximum_type& bin::
  maximum ()
  {
    return this->maximum_.get ();
  }

  void bin::
  maximum (const maximum_type& x)
  {
    this->maximum_.set (x);
  }

  void bin::
  maximum (::std::auto_ptr< maximum_type > x)
  {
    this->maximum_.set (x);
  }

  const bin::bin_id_optional& bin::
  bin_id () const
  {
    return this->bin_id_;
  }

  bin::bin_id_optional& bin::
  bin_id ()
  {
    return this->bin_id_;
  }

  void bin::
  bin_id (const bin_id_type& x)
  {
    this->bin_id_.set (x);
  }

  void bin::
  bin_id (const bin_id_optional& x)
  {
    this->bin_id_ = x;
  }

  void bin::
  bin_id (::std::auto_ptr< bin_id_type > x)
  {
    this->bin_id_.set (x);
  }

  const bin::scale_id_optional& bin::
  scale_id () const
  {
    return this->scale_id_;
  }

  bin::scale_id_optional& bin::
  scale_id ()
  {
    return this->scale_id_;
  }

  void bin::
  scale_id (const scale_id_type& x)
  {
    this->scale_id_.set (x);
  }

  void bin::
  scale_id (const scale_id_optional& x)
  {
    this->scale_id_ = x;
  }

  void bin::
  scale_id (::std::auto_ptr< scale_id_type > x)
  {
    this->scale_id_.set (x);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace tmxsdtree
{
  // bin
  //

  bin::
  bin (const number_type& number,
       const minimum_type& minimum,
       const maximum_type& maximum)
  : ::xml_schema::type (),
    number_ (number, this),
    minimum_ (minimum, this),
    maximum_ (maximum, this),
    bin_id_ (this),
    scale_id_ (this)
  {
  }

  bin::
  bin (const bin& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    number_ (x.number_, f, this),
    minimum_ (x.minimum_, f, this),
    maximum_ (x.maximum_, f, this),
    bin_id_ (x.bin_id_, f, this),
    scale_id_ (x.scale_id_, f, this)
  {
  }

  bin::
  bin (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    number_ (this),
    minimum_ (this),
    maximum_ (this),
    bin_id_ (this),
    scale_id_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void bin::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // number
      //
      if (n.name () == "number" && n.namespace_ ().empty ())
      {
        if (!number_.present ())
        {
          this->number_.set (number_traits::create (i, f, this));
          continue;
        }
      }

      // minimum
      //
      if (n.name () == "minimum" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< minimum_type > r (
          minimum_traits::create (i, f, this));

        if (!minimum_.present ())
        {
          this->minimum_.set (r);
          continue;
        }
      }

      // maximum
      //
      if (n.name () == "maximum" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< maximum_type > r (
          maximum_traits::create (i, f, this));

        if (!maximum_.present ())
        {
          this->maximum_.set (r);
          continue;
        }
      }

      break;
    }

    if (!number_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "number",
        "");
    }

    if (!minimum_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "minimum",
        "");
    }

    if (!maximum_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "maximum",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "bin_id" && n.namespace_ ().empty ())
      {
        this->bin_id_.set (bin_id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "scale_id" && n.namespace_ ().empty ())
      {
        this->scale_id_.set (scale_id_traits::create (i, f, this));
        continue;
      }
    }
  }

  bin* bin::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class bin (*this, f, c);
  }

  bin& bin::
  operator= (const bin& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->number_ = x.number_;
      this->minimum_ = x.minimum_;
      this->maximum_ = x.maximum_;
      this->bin_id_ = x.bin_id_;
      this->scale_id_ = x.scale_id_;
    }

    return *this;
  }

  bin::
  ~bin ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace tmxsdtree
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace tmxsdtree
{
  void
  operator<< (::xercesc::DOMElement& e, const bin& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // number
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "number",
          e));

      s << i.number ();
    }

    // minimum
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "minimum",
          e));

      s << i.minimum ();
    }

    // maximum
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "maximum",
          e));

      s << i.maximum ();
    }

    // bin_id
    //
    if (i.bin_id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "bin_id",
          e));

      a << *i.bin_id ();
    }

    // scale_id
    //
    if (i.scale_id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "scale_id",
          e));

      a << *i.scale_id ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

