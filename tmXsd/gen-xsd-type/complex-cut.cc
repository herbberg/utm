// Copyright (c) 2005-2014 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "complex-cut.hxx"

namespace tmxsdtree
{
  // cut
  // 

  const cut::name_type& cut::
  name () const
  {
    return this->name_.get ();
  }

  cut::name_type& cut::
  name ()
  {
    return this->name_.get ();
  }

  void cut::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void cut::
  name (::std::unique_ptr< name_type > x)
  {
    this->name_.set (std::move (x));
  }

  const cut::object_type& cut::
  object () const
  {
    return this->object_.get ();
  }

  cut::object_type& cut::
  object ()
  {
    return this->object_.get ();
  }

  void cut::
  object (const object_type& x)
  {
    this->object_.set (x);
  }

  void cut::
  object (::std::unique_ptr< object_type > x)
  {
    this->object_.set (std::move (x));
  }

  const cut::type_type& cut::
  type () const
  {
    return this->type_.get ();
  }

  cut::type_type& cut::
  type ()
  {
    return this->type_.get ();
  }

  void cut::
  type (const type_type& x)
  {
    this->type_.set (x);
  }

  void cut::
  type (::std::unique_ptr< type_type > x)
  {
    this->type_.set (std::move (x));
  }

  const cut::minimum_type& cut::
  minimum () const
  {
    return this->minimum_.get ();
  }

  cut::minimum_type& cut::
  minimum ()
  {
    return this->minimum_.get ();
  }

  void cut::
  minimum (const minimum_type& x)
  {
    this->minimum_.set (x);
  }

  void cut::
  minimum (::std::unique_ptr< minimum_type > x)
  {
    this->minimum_.set (std::move (x));
  }

  const cut::maximum_type& cut::
  maximum () const
  {
    return this->maximum_.get ();
  }

  cut::maximum_type& cut::
  maximum ()
  {
    return this->maximum_.get ();
  }

  void cut::
  maximum (const maximum_type& x)
  {
    this->maximum_.set (x);
  }

  void cut::
  maximum (::std::unique_ptr< maximum_type > x)
  {
    this->maximum_.set (std::move (x));
  }

  const cut::data_type& cut::
  data () const
  {
    return this->data_.get ();
  }

  cut::data_type& cut::
  data ()
  {
    return this->data_.get ();
  }

  void cut::
  data (const data_type& x)
  {
    this->data_.set (x);
  }

  void cut::
  data (::std::unique_ptr< data_type > x)
  {
    this->data_.set (std::move (x));
  }

  const cut::comment_optional& cut::
  comment () const
  {
    return this->comment_;
  }

  cut::comment_optional& cut::
  comment ()
  {
    return this->comment_;
  }

  void cut::
  comment (const comment_type& x)
  {
    this->comment_.set (x);
  }

  void cut::
  comment (const comment_optional& x)
  {
    this->comment_ = x;
  }

  void cut::
  comment (::std::unique_ptr< comment_type > x)
  {
    this->comment_.set (std::move (x));
  }

  const cut::cut_id_optional& cut::
  cut_id () const
  {
    return this->cut_id_;
  }

  cut::cut_id_optional& cut::
  cut_id ()
  {
    return this->cut_id_;
  }

  void cut::
  cut_id (const cut_id_type& x)
  {
    this->cut_id_.set (x);
  }

  void cut::
  cut_id (const cut_id_optional& x)
  {
    this->cut_id_ = x;
  }

  void cut::
  cut_id (::std::unique_ptr< cut_id_type > x)
  {
    this->cut_id_.set (std::move (x));
  }

  const cut::datetime_optional& cut::
  datetime () const
  {
    return this->datetime_;
  }

  cut::datetime_optional& cut::
  datetime ()
  {
    return this->datetime_;
  }

  void cut::
  datetime (const datetime_type& x)
  {
    this->datetime_.set (x);
  }

  void cut::
  datetime (const datetime_optional& x)
  {
    this->datetime_ = x;
  }

  void cut::
  datetime (::std::unique_ptr< datetime_type > x)
  {
    this->datetime_.set (std::move (x));
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace tmxsdtree
{
  // cut
  //

  cut::
  cut (const name_type& name,
       const object_type& object,
       const type_type& type,
       const minimum_type& minimum,
       const maximum_type& maximum,
       const data_type& data)
  : ::xml_schema::type (),
    name_ (name, this),
    object_ (object, this),
    type_ (type, this),
    minimum_ (minimum, this),
    maximum_ (maximum, this),
    data_ (data, this),
    comment_ (this),
    cut_id_ (this),
    datetime_ (this)
  {
  }

  cut::
  cut (const cut& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    name_ (x.name_, f, this),
    object_ (x.object_, f, this),
    type_ (x.type_, f, this),
    minimum_ (x.minimum_, f, this),
    maximum_ (x.maximum_, f, this),
    data_ (x.data_, f, this),
    comment_ (x.comment_, f, this),
    cut_id_ (x.cut_id_, f, this),
    datetime_ (x.datetime_, f, this)
  {
  }

  cut::
  cut (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    name_ (this),
    object_ (this),
    type_ (this),
    minimum_ (this),
    maximum_ (this),
    data_ (this),
    comment_ (this),
    cut_id_ (this),
    datetime_ (this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false, true);
      this->parse (p, f);
    }
  }

  void cut::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_content (); p.next_content (false))
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // name
      //
      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (::std::move (r));
          continue;
        }
      }

      // object
      //
      if (n.name () == "object" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< object_type > r (
          object_traits::create (i, f, this));

        if (!object_.present ())
        {
          this->object_.set (::std::move (r));
          continue;
        }
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< type_type > r (
          type_traits::create (i, f, this));

        if (!type_.present ())
        {
          this->type_.set (::std::move (r));
          continue;
        }
      }

      // minimum
      //
      if (n.name () == "minimum" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< minimum_type > r (
          minimum_traits::create (i, f, this));

        if (!minimum_.present ())
        {
          this->minimum_.set (::std::move (r));
          continue;
        }
      }

      // maximum
      //
      if (n.name () == "maximum" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< maximum_type > r (
          maximum_traits::create (i, f, this));

        if (!maximum_.present ())
        {
          this->maximum_.set (::std::move (r));
          continue;
        }
      }

      // data
      //
      if (n.name () == "data" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< data_type > r (
          data_traits::create (i, f, this));

        if (!data_.present ())
        {
          this->data_.set (::std::move (r));
          continue;
        }
      }

      // comment
      //
      if (n.name () == "comment" && n.namespace_ ().empty ())
      {
        ::std::unique_ptr< comment_type > r (
          comment_traits::create (i, f, this));

        if (!this->comment_)
        {
          this->comment_.set (::std::move (r));
          continue;
        }
      }

      break;
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "");
    }

    if (!object_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "object",
        "");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "type",
        "");
    }

    if (!minimum_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "minimum",
        "");
    }

    if (!maximum_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "maximum",
        "");
    }

    if (!data_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "data",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "cut_id" && n.namespace_ ().empty ())
      {
        this->cut_id_.set (cut_id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "datetime" && n.namespace_ ().empty ())
      {
        this->datetime_.set (datetime_traits::create (i, f, this));
        continue;
      }
    }
  }

  cut* cut::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class cut (*this, f, c);
  }

  cut& cut::
  operator= (const cut& x)
  {
    if (this != &x)
    {
      static_cast< ::xml_schema::type& > (*this) = x;
      this->name_ = x.name_;
      this->object_ = x.object_;
      this->type_ = x.type_;
      this->minimum_ = x.minimum_;
      this->maximum_ = x.maximum_;
      this->data_ = x.data_;
      this->comment_ = x.comment_;
      this->cut_id_ = x.cut_id_;
      this->datetime_ = x.datetime_;
    }

    return *this;
  }

  cut::
  ~cut ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace tmxsdtree
{
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace tmxsdtree
{
  void
  operator<< (::xercesc::DOMElement& e, const cut& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          e));

      s << i.name ();
    }

    // object
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "object",
          e));

      s << i.object ();
    }

    // type
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          e));

      s << i.type ();
    }

    // minimum
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "minimum",
          e));

      s << i.minimum ();
    }

    // maximum
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "maximum",
          e));

      s << i.maximum ();
    }

    // data
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "data",
          e));

      s << i.data ();
    }

    // comment
    //
    if (i.comment ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "comment",
          e));

      s << *i.comment ();
    }

    // cut_id
    //
    if (i.cut_id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "cut_id",
          e));

      a << *i.cut_id ();
    }

    // datetime
    //
    if (i.datetime ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "datetime",
          e));

      a << *i.datetime ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

