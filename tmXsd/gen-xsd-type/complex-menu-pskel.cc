// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "complex-menu-pskel.hh"

namespace tmxsd
{
  // menu_pskel
  //

  void menu_pskel::
  ancestor_id_parser (::tmxsd::id_pskel& p)
  {
    this->ancestor_id_ = &p;
  }

  void menu_pskel::
  name_parser (::tmxsd::char1k_pskel& p)
  {
    this->name_ = &p;
  }

  void menu_pskel::
  uuid_menu_parser (::tmxsd::uuid_pskel& p)
  {
    this->uuid_menu_ = &p;
  }

  void menu_pskel::
  uuid_firmware_parser (::tmxsd::uuid_pskel& p)
  {
    this->uuid_firmware_ = &p;
  }

  void menu_pskel::
  global_tag_parser (::tmxsd::char1k_pskel& p)
  {
    this->global_tag_ = &p;
  }

  void menu_pskel::
  grammar_version_parser (::tmxsd::char64_pskel& p)
  {
    this->grammar_version_ = &p;
  }

  void menu_pskel::
  n_modules_parser (::xml_schema::unsigned_int_pskel& p)
  {
    this->n_modules_ = &p;
  }

  void menu_pskel::
  is_valid_parser (::xml_schema::boolean_pskel& p)
  {
    this->is_valid_ = &p;
  }

  void menu_pskel::
  is_obsolete_parser (::xml_schema::boolean_pskel& p)
  {
    this->is_obsolete_ = &p;
  }

  void menu_pskel::
  comment_parser (::tmxsd::char4k_pskel& p)
  {
    this->comment_ = &p;
  }

  void menu_pskel::
  algorithm_parser (::tmxsd::algorithm_pskel& p)
  {
    this->algorithm_ = &p;
  }

  void menu_pskel::
  scale_set_parser (::tmxsd::scale_set_pskel& p)
  {
    this->scale_set_ = &p;
  }

  void menu_pskel::
  ext_signal_set_parser (::tmxsd::ext_signal_set_pskel& p)
  {
    this->ext_signal_set_ = &p;
  }

  void menu_pskel::
  menu_id_parser (::tmxsd::id_pskel& p)
  {
    this->menu_id_ = &p;
  }

  void menu_pskel::
  datetime_parser (::tmxsd::datetime_pskel& p)
  {
    this->datetime_ = &p;
  }

  void menu_pskel::
  parsers (::tmxsd::id_pskel& ancestor_id,
           ::tmxsd::char1k_pskel& name,
           ::tmxsd::uuid_pskel& uuid_menu,
           ::tmxsd::uuid_pskel& uuid_firmware,
           ::tmxsd::char1k_pskel& global_tag,
           ::tmxsd::char64_pskel& grammar_version,
           ::xml_schema::unsigned_int_pskel& n_modules,
           ::xml_schema::boolean_pskel& is_valid,
           ::xml_schema::boolean_pskel& is_obsolete,
           ::tmxsd::char4k_pskel& comment,
           ::tmxsd::algorithm_pskel& algorithm,
           ::tmxsd::scale_set_pskel& scale_set,
           ::tmxsd::ext_signal_set_pskel& ext_signal_set,
           ::tmxsd::id_pskel& menu_id,
           ::tmxsd::datetime_pskel& datetime)
  {
    this->ancestor_id_ = &ancestor_id;
    this->name_ = &name;
    this->uuid_menu_ = &uuid_menu;
    this->uuid_firmware_ = &uuid_firmware;
    this->global_tag_ = &global_tag;
    this->grammar_version_ = &grammar_version;
    this->n_modules_ = &n_modules;
    this->is_valid_ = &is_valid;
    this->is_obsolete_ = &is_obsolete;
    this->comment_ = &comment;
    this->algorithm_ = &algorithm;
    this->scale_set_ = &scale_set;
    this->ext_signal_set_ = &ext_signal_set;
    this->menu_id_ = &menu_id;
    this->datetime_ = &datetime;
  }

  menu_pskel::
  menu_pskel ()
  : ancestor_id_ (0),
    name_ (0),
    uuid_menu_ (0),
    uuid_firmware_ (0),
    global_tag_ (0),
    grammar_version_ (0),
    n_modules_ (0),
    is_valid_ (0),
    is_obsolete_ (0),
    comment_ (0),
    algorithm_ (0),
    scale_set_ (0),
    ext_signal_set_ (0),
    menu_id_ (0),
    datetime_ (0),
    v_state_stack_ (sizeof (v_state_), &v_state_first_)
  {
  }
}

namespace tmxsd
{
  // menu_pskel
  //

  void menu_pskel::
  ancestor_id (unsigned int)
  {
  }

  void menu_pskel::
  name (const std::string&)
  {
  }

  void menu_pskel::
  uuid_menu (const std::string&)
  {
  }

  void menu_pskel::
  uuid_firmware (const std::string&)
  {
  }

  void menu_pskel::
  global_tag (const std::string&)
  {
  }

  void menu_pskel::
  grammar_version (const std::string&)
  {
  }

  void menu_pskel::
  n_modules (unsigned int)
  {
  }

  void menu_pskel::
  is_valid (bool)
  {
  }

  void menu_pskel::
  is_obsolete (bool)
  {
  }

  void menu_pskel::
  comment (const std::string&)
  {
  }

  void menu_pskel::
  algorithm (const ::tmxsd::algorithm&)
  {
  }

  void menu_pskel::
  scale_set (const ::tmxsd::scale_set&)
  {
  }

  void menu_pskel::
  ext_signal_set (const ::tmxsd::ext_signal_set&)
  {
  }

  void menu_pskel::
  menu_id (unsigned int)
  {
  }

  void menu_pskel::
  datetime (const std::string&)
  {
  }
}

#include <cassert>

namespace tmxsd
{
  // Element validation and dispatch functions for menu_pskel.
  //
  bool menu_pskel::
  _start_element_impl (const ::xml_schema::ro_string& ns,
                       const ::xml_schema::ro_string& n,
                       const ::xml_schema::ro_string* t)
  {
    while (&t == 0) /* might be unused */;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    if (vd->func == 0 && vd->state == 0)
    {
      if (this->::xml_schema::complex_content::_start_element_impl (ns, n, t))
        return true;
      else
        vd->state = 1;
    }

    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, ns, n, t, true);

      vd = vs.data + (vs.size - 1);

      if (vd->state == ~0UL)
        vd = vs.data + (--vs.size - 1);
      else
        break;
    }

    if (vd->func == 0)
    {
      if (vd->state != ~0UL)
      {
        unsigned long s = ~0UL;

        if (n == "ancestor_id" && ns.empty ())
          s = 0UL;

        if (s != ~0UL)
        {
          vd->count++;
          vd->state = ~0UL;

          vd = vs.data + vs.size++;
          vd->func = &menu_pskel::sequence_0;
          vd->state = s;
          vd->count = 0;

          this->sequence_0 (vd->state, vd->count, ns, n, t, true);
        }
        else
        {
          if (vd->count < 1UL)
            this->_expected_element (
              "", "ancestor_id",
              ns, n);
          return false;
        }
      }
      else
        return false;
    }

    return true;
  }

  bool menu_pskel::
  _end_element_impl (const ::xml_schema::ro_string& ns,
                     const ::xml_schema::ro_string& n)
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size - 1];

    if (vd.func == 0 && vd.state == 0)
    {
      if (!::xml_schema::complex_content::_end_element_impl (ns, n))
        assert (false);
      return true;
    }

    assert (vd.func != 0);
    (this->*vd.func) (vd.state, vd.count, ns, n, 0, false);

    if (vd.state == ~0UL)
      vs.size--;

    return true;
  }

  void menu_pskel::
  _pre_e_validate ()
  {
    this->v_state_stack_.push ();
    static_cast< v_state_* > (this->v_state_stack_.top ())->size = 0;

    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_& vd = vs.data[vs.size++];

    vd.func = 0;
    vd.state = 0;
    vd.count = 0;
  }

  void menu_pskel::
  _post_e_validate ()
  {
    v_state_& vs = *static_cast< v_state_* > (this->v_state_stack_.top ());
    v_state_descr_* vd = vs.data + (vs.size - 1);

    ::xml_schema::ro_string empty;
    while (vd->func != 0)
    {
      (this->*vd->func) (vd->state, vd->count, empty, empty, 0, true);
      assert (vd->state == ~0UL);
      vd = vs.data + (--vs.size - 1);
    }

    if (vd->count < 1UL)
      this->_expected_element (
        "", "ancestor_id");

    this->v_state_stack_.pop ();
  }

  void menu_pskel::
  sequence_0 (unsigned long& state,
              unsigned long& count,
              const ::xml_schema::ro_string& ns,
              const ::xml_schema::ro_string& n,
              const ::xml_schema::ro_string* t,
              bool start)
  {
    while (&t == 0) /* might be unused */;

    switch (state)
    {
      case 0UL:
      {
        if (n == "ancestor_id" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->ancestor_id_;

            if (this->ancestor_id_)
              this->ancestor_id_->pre ();
          }
          else
          {
            if (this->ancestor_id_)
            {
              unsigned int tmp (this->ancestor_id_->post_id ());
              this->ancestor_id (tmp);
            }

            count = 0;
            state = 1UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "ancestor_id",
              ns, n);
          count = 0;
          state = 1UL;
          // Fall through.
        }
      }
      case 1UL:
      {
        if (n == "name" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->name_;

            if (this->name_)
              this->name_->pre ();
          }
          else
          {
            if (this->name_)
            {
              const std::string& tmp (this->name_->post_char1k ());
              this->name (tmp);
            }

            count = 0;
            state = 2UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "name",
              ns, n);
          count = 0;
          state = 2UL;
          // Fall through.
        }
      }
      case 2UL:
      {
        if (n == "uuid_menu" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->uuid_menu_;

            if (this->uuid_menu_)
              this->uuid_menu_->pre ();
          }
          else
          {
            if (this->uuid_menu_)
            {
              const std::string& tmp (this->uuid_menu_->post_uuid ());
              this->uuid_menu (tmp);
            }

            count = 0;
            state = 3UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "uuid_menu",
              ns, n);
          count = 0;
          state = 3UL;
          // Fall through.
        }
      }
      case 3UL:
      {
        if (n == "uuid_firmware" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->uuid_firmware_;

            if (this->uuid_firmware_)
              this->uuid_firmware_->pre ();
          }
          else
          {
            if (this->uuid_firmware_)
            {
              const std::string& tmp (this->uuid_firmware_->post_uuid ());
              this->uuid_firmware (tmp);
            }

            count = 0;
            state = 4UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "uuid_firmware",
              ns, n);
          count = 0;
          state = 4UL;
          // Fall through.
        }
      }
      case 4UL:
      {
        if (n == "global_tag" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->global_tag_;

            if (this->global_tag_)
              this->global_tag_->pre ();
          }
          else
          {
            if (this->global_tag_)
            {
              const std::string& tmp (this->global_tag_->post_char1k ());
              this->global_tag (tmp);
            }

            count = 0;
            state = 5UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "global_tag",
              ns, n);
          count = 0;
          state = 5UL;
          // Fall through.
        }
      }
      case 5UL:
      {
        if (n == "grammar_version" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->grammar_version_;

            if (this->grammar_version_)
              this->grammar_version_->pre ();
          }
          else
          {
            if (this->grammar_version_)
            {
              const std::string& tmp (this->grammar_version_->post_char64 ());
              this->grammar_version (tmp);
            }

            count = 0;
            state = 6UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "grammar_version",
              ns, n);
          count = 0;
          state = 6UL;
          // Fall through.
        }
      }
      case 6UL:
      {
        if (n == "n_modules" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->n_modules_;

            if (this->n_modules_)
              this->n_modules_->pre ();
          }
          else
          {
            if (this->n_modules_)
            {
              unsigned int tmp (this->n_modules_->post_unsigned_int ());
              this->n_modules (tmp);
            }

            count = 0;
            state = 7UL;
          }

          break;
        }
        else
        {
          assert (start);
          if (count < 1UL)
            this->_expected_element (
              "", "n_modules",
              ns, n);
          count = 0;
          state = 7UL;
          // Fall through.
        }
      }
      case 7UL:
      {
        if (n == "is_valid" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->is_valid_;

            if (this->is_valid_)
              this->is_valid_->pre ();
          }
          else
          {
            if (this->is_valid_)
            {
              bool tmp (this->is_valid_->post_boolean ());
              this->is_valid (tmp);
            }

            count = 0;
            state = 8UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 8UL;
          // Fall through.
        }
      }
      case 8UL:
      {
        if (n == "is_obsolete" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->is_obsolete_;

            if (this->is_obsolete_)
              this->is_obsolete_->pre ();
          }
          else
          {
            if (this->is_obsolete_)
            {
              bool tmp (this->is_obsolete_->post_boolean ());
              this->is_obsolete (tmp);
            }

            count = 0;
            state = 9UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 9UL;
          // Fall through.
        }
      }
      case 9UL:
      {
        if (n == "comment" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->comment_;

            if (this->comment_)
              this->comment_->pre ();
          }
          else
          {
            if (this->comment_)
            {
              const std::string& tmp (this->comment_->post_char4k ());
              this->comment (tmp);
            }

            count = 0;
            state = 10UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 10UL;
          // Fall through.
        }
      }
      case 10UL:
      {
        if (n == "algorithm" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->algorithm_;

            if (this->algorithm_)
              this->algorithm_->pre ();
          }
          else
          {
            if (this->algorithm_)
            {
              const ::tmxsd::algorithm& tmp (this->algorithm_->post_algorithm ());
              this->algorithm (tmp);
            }

            count++;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 11UL;
          // Fall through.
        }
      }
      case 11UL:
      {
        if (n == "scale_set" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->scale_set_;

            if (this->scale_set_)
              this->scale_set_->pre ();
          }
          else
          {
            if (this->scale_set_)
            {
              const ::tmxsd::scale_set& tmp (this->scale_set_->post_scale_set ());
              this->scale_set (tmp);
            }

            count = 0;
            state = 12UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = 12UL;
          // Fall through.
        }
      }
      case 12UL:
      {
        if (n == "ext_signal_set" && ns.empty ())
        {
          if (start)
          {
            this->::xml_schema::complex_content::context_.top ().parser_ = this->ext_signal_set_;

            if (this->ext_signal_set_)
              this->ext_signal_set_->pre ();
          }
          else
          {
            if (this->ext_signal_set_)
            {
              const ::tmxsd::ext_signal_set& tmp (this->ext_signal_set_->post_ext_signal_set ());
              this->ext_signal_set (tmp);
            }

            count = 0;
            state = ~0UL;
          }

          break;
        }
        else
        {
          assert (start);
          count = 0;
          state = ~0UL;
          // Fall through.
        }
      }
      case ~0UL:
        break;
    }
  }
}

namespace tmxsd
{
  // Attribute validation and dispatch functions for menu_pskel.
  //
  bool menu_pskel::
  _attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                             const ::xml_schema::ro_string& n,
                             const ::xml_schema::ro_string& s)
  {
    if (n == "menu_id" && ns.empty ())
    {
      if (this->menu_id_)
      {
        this->menu_id_->pre ();
        this->menu_id_->_pre_impl ();
        this->menu_id_->_characters (s);
        this->menu_id_->_post_impl ();
        unsigned int tmp (this->menu_id_->post_id ());
        this->menu_id (tmp);
      }

      return true;
    }

    if (n == "datetime" && ns.empty ())
    {
      if (this->datetime_)
      {
        this->datetime_->pre ();
        this->datetime_->_pre_impl ();
        this->datetime_->_characters (s);
        this->datetime_->_post_impl ();
        const std::string& tmp (this->datetime_->post_datetime ());
        this->datetime (tmp);
      }

      return true;
    }

    return false;
  }
}

namespace tmxsd
{
}

// Begin epilogue.
//
//
// End epilogue.

