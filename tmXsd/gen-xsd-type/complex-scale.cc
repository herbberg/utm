// Copyright (C) 2005-2008 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "complex-scale.hxx"

namespace tmxsdtree
{
  // scale
  // 

  const scale::object_type& scale::
  object () const
  {
    return this->object_.get ();
  }

  scale::object_type& scale::
  object ()
  {
    return this->object_.get ();
  }

  void scale::
  object (const object_type& x)
  {
    this->object_.set (x);
  }

  void scale::
  object (::std::auto_ptr< object_type > x)
  {
    this->object_.set (x);
  }

  const scale::type_type& scale::
  type () const
  {
    return this->type_.get ();
  }

  scale::type_type& scale::
  type ()
  {
    return this->type_.get ();
  }

  void scale::
  type (const type_type& x)
  {
    this->type_.set (x);
  }

  void scale::
  type (::std::auto_ptr< type_type > x)
  {
    this->type_.set (x);
  }

  const scale::minimum_type& scale::
  minimum () const
  {
    return this->minimum_.get ();
  }

  scale::minimum_type& scale::
  minimum ()
  {
    return this->minimum_.get ();
  }

  void scale::
  minimum (const minimum_type& x)
  {
    this->minimum_.set (x);
  }

  void scale::
  minimum (::std::auto_ptr< minimum_type > x)
  {
    this->minimum_.set (x);
  }

  const scale::maximum_type& scale::
  maximum () const
  {
    return this->maximum_.get ();
  }

  scale::maximum_type& scale::
  maximum ()
  {
    return this->maximum_.get ();
  }

  void scale::
  maximum (const maximum_type& x)
  {
    this->maximum_.set (x);
  }

  void scale::
  maximum (::std::auto_ptr< maximum_type > x)
  {
    this->maximum_.set (x);
  }

  const scale::step_type& scale::
  step () const
  {
    return this->step_.get ();
  }

  scale::step_type& scale::
  step ()
  {
    return this->step_.get ();
  }

  void scale::
  step (const step_type& x)
  {
    this->step_.set (x);
  }

  void scale::
  step (::std::auto_ptr< step_type > x)
  {
    this->step_.set (x);
  }

  const scale::n_bits_type& scale::
  n_bits () const
  {
    return this->n_bits_.get ();
  }

  scale::n_bits_type& scale::
  n_bits ()
  {
    return this->n_bits_.get ();
  }

  void scale::
  n_bits (const n_bits_type& x)
  {
    this->n_bits_.set (x);
  }

  const scale::comment_optional& scale::
  comment () const
  {
    return this->comment_;
  }

  scale::comment_optional& scale::
  comment ()
  {
    return this->comment_;
  }

  void scale::
  comment (const comment_type& x)
  {
    this->comment_.set (x);
  }

  void scale::
  comment (const comment_optional& x)
  {
    this->comment_ = x;
  }

  void scale::
  comment (::std::auto_ptr< comment_type > x)
  {
    this->comment_.set (x);
  }

  const scale::bin_sequence& scale::
  bin () const
  {
    return this->bin_;
  }

  scale::bin_sequence& scale::
  bin ()
  {
    return this->bin_;
  }

  void scale::
  bin (const bin_sequence& s)
  {
    this->bin_ = s;
  }

  const scale::scale_id_optional& scale::
  scale_id () const
  {
    return this->scale_id_;
  }

  scale::scale_id_optional& scale::
  scale_id ()
  {
    return this->scale_id_;
  }

  void scale::
  scale_id (const scale_id_type& x)
  {
    this->scale_id_.set (x);
  }

  void scale::
  scale_id (const scale_id_optional& x)
  {
    this->scale_id_ = x;
  }

  void scale::
  scale_id (::std::auto_ptr< scale_id_type > x)
  {
    this->scale_id_.set (x);
  }

  const scale::datetime_optional& scale::
  datetime () const
  {
    return this->datetime_;
  }

  scale::datetime_optional& scale::
  datetime ()
  {
    return this->datetime_;
  }

  void scale::
  datetime (const datetime_type& x)
  {
    this->datetime_.set (x);
  }

  void scale::
  datetime (const datetime_optional& x)
  {
    this->datetime_ = x;
  }

  void scale::
  datetime (::std::auto_ptr< datetime_type > x)
  {
    this->datetime_.set (x);
  }

  const scale::n_bins_optional& scale::
  n_bins () const
  {
    return this->n_bins_;
  }

  scale::n_bins_optional& scale::
  n_bins ()
  {
    return this->n_bins_;
  }

  void scale::
  n_bins (const n_bins_type& x)
  {
    this->n_bins_.set (x);
  }

  void scale::
  n_bins (const n_bins_optional& x)
  {
    this->n_bins_ = x;
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace tmxsdtree
{
  // scale
  //

  scale::
  scale (const object_type& object,
         const type_type& type,
         const minimum_type& minimum,
         const maximum_type& maximum,
         const step_type& step,
         const n_bits_type& n_bits)
  : ::xml_schema::type (),
    object_ (object, ::xml_schema::flags (), this),
    type_ (type, ::xml_schema::flags (), this),
    minimum_ (minimum, ::xml_schema::flags (), this),
    maximum_ (maximum, ::xml_schema::flags (), this),
    step_ (step, ::xml_schema::flags (), this),
    n_bits_ (n_bits, ::xml_schema::flags (), this),
    comment_ (::xml_schema::flags (), this),
    bin_ (::xml_schema::flags (), this),
    scale_id_ (::xml_schema::flags (), this),
    datetime_ (::xml_schema::flags (), this),
    n_bins_ (::xml_schema::flags (), this)
  {
  }

  scale::
  scale (const scale& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    object_ (x.object_, f, this),
    type_ (x.type_, f, this),
    minimum_ (x.minimum_, f, this),
    maximum_ (x.maximum_, f, this),
    step_ (x.step_, f, this),
    n_bits_ (x.n_bits_, f, this),
    comment_ (x.comment_, f, this),
    bin_ (x.bin_, f, this),
    scale_id_ (x.scale_id_, f, this),
    datetime_ (x.datetime_, f, this),
    n_bins_ (x.n_bins_, f, this)
  {
  }

  scale::
  scale (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    object_ (f, this),
    type_ (f, this),
    minimum_ (f, this),
    maximum_ (f, this),
    step_ (f, this),
    n_bits_ (f, this),
    comment_ (f, this),
    bin_ (f, this),
    scale_id_ (f, this),
    datetime_ (f, this),
    n_bins_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e);
      this->parse (p, f);
    }
  }

  void scale::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // object
      //
      if (n.name () == "object" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< object_type > r (
          object_traits::create (i, f, this));

        if (!object_.present ())
        {
          this->object (r);
          continue;
        }
      }

      // type
      //
      if (n.name () == "type" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< type_type > r (
          type_traits::create (i, f, this));

        if (!type_.present ())
        {
          this->type (r);
          continue;
        }
      }

      // minimum
      //
      if (n.name () == "minimum" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< minimum_type > r (
          minimum_traits::create (i, f, this));

        if (!minimum_.present ())
        {
          this->minimum (r);
          continue;
        }
      }

      // maximum
      //
      if (n.name () == "maximum" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< maximum_type > r (
          maximum_traits::create (i, f, this));

        if (!maximum_.present ())
        {
          this->maximum (r);
          continue;
        }
      }

      // step
      //
      if (n.name () == "step" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< step_type > r (
          step_traits::create (i, f, this));

        if (!step_.present ())
        {
          this->step (r);
          continue;
        }
      }

      // n_bits
      //
      if (n.name () == "n_bits" && n.namespace_ ().empty ())
      {
        if (!n_bits_.present ())
        {
          this->n_bits (n_bits_traits::create (i, f, this));
          continue;
        }
      }

      // comment
      //
      if (n.name () == "comment" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< comment_type > r (
          comment_traits::create (i, f, this));

        if (!this->comment ())
        {
          this->comment (r);
          continue;
        }
      }

      // bin
      //
      if (n.name () == "bin" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< bin_type > r (
          bin_traits::create (i, f, this));

        this->bin ().push_back (r);
        continue;
      }

      break;
    }

    if (!object_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "object",
        "");
    }

    if (!type_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "type",
        "");
    }

    if (!minimum_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "minimum",
        "");
    }

    if (!maximum_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "maximum",
        "");
    }

    if (!step_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "step",
        "");
    }

    if (!n_bits_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "n_bits",
        "");
    }

    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "scale_id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< scale_id_type > r (
          scale_id_traits::create (i, f, this));

        this->scale_id (r);
        continue;
      }

      if (n.name () == "datetime" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< datetime_type > r (
          datetime_traits::create (i, f, this));

        this->datetime (r);
        continue;
      }

      if (n.name () == "n_bins" && n.namespace_ ().empty ())
      {
        this->n_bins (n_bins_traits::create (i, f, this));
        continue;
      }
    }
  }

  scale* scale::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new scale (*this, f, c);
  }

  scale::
  ~scale ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace tmxsdtree
{
}

#include <ostream>
#include <xsd/cxx/xml/dom/serialization-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace tmxsdtree
{
  void
  operator<< (::xercesc::DOMElement& e, const scale& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // object
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "object",
          e));

      s << i.object ();
    }

    // type
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "type",
          e));

      s << i.type ();
    }

    // minimum
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "minimum",
          e));

      s << i.minimum ();
    }

    // maximum
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "maximum",
          e));

      s << i.maximum ();
    }

    // step
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "step",
          e));

      s << i.step ();
    }

    // n_bits
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "n_bits",
          e));

      s << i.n_bits ();
    }

    // comment
    //
    if (i.comment ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "comment",
          e));

      s << *i.comment ();
    }

    // bin
    //
    for (scale::bin_const_iterator
         b (i.bin ().begin ()), n (i.bin ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "bin",
          e));

      s << *b;
    }

    // scale_id
    //
    if (i.scale_id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "scale_id",
          e));

      a << *i.scale_id ();
    }

    // datetime
    //
    if (i.datetime ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "datetime",
          e));

      a << *i.datetime ();
    }

    // n_bins
    //
    if (i.n_bins ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "n_bins",
          e));

      a << *i.n_bins ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

